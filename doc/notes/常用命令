docker stop `docker ps -a | grep  8879 | awk '{print $1}'`
docker stop `docker ps -a | grep  192.168.230.129:5001/blah-user:latest | awk '{print $1}'`
docker rm `docker ps -a | grep  192.168.230.129:5001/blah-user:latest | awk '{print $1}'`
docker volume rm `docker volume ls | grep local | awk '{print $2}'`
----------
导出
mysqldump -h yourhostnameorIP -u root -p --no-data dbname > schema.sql
mysqldump -h localhost -u root -proot --no-data blah_user > schema.sql
docker exec mysql mysqldump -h localhost -u root -proot --no-data blah_user > blah_user_schema.sql
docker exec mysql mysqldump -h localhost -u root -proot --no-data blah_auth > blah_auth_schema.sql
docker exec mysql mysqldump -h localhost -u root -proot --no-data blah_store > blah_store.sql
docker exec mysql mysqldump -h localhost -u root -proot blah_store > blah_store.sql

导入
docker exec -i mysql /usr/bin/mysql -u root --password=root blah_user < blah_user_schema.sql
docker exec -i mysql /usr/bin/mysql -u root --password=root blah_auth < blah_auth_schema.sql

---------------------
查看docker容器的内存占用
docker stats --no-stream

先通过docker ps -a 找到容器的container id
再使用ps -ef | grep 找到容器对应的进程
获得容器对应的pid后，就可以使用top、pmap、ps等查看进程内存的命令查看容器的内存占用情况了
top -p 5140
pmap -d 5140
ps -e -o 'pid,comm,args,pcpu,rsz,vsz,stime,user,uid' | grep 5140
其中rsz为实际内存
------------------------
Bash script and /bin/bash^M: bad interpreter: No such file or directory
sed -i -e 's/\r$//' scriptname.sh
------------------------
zookeeper cli:
docker exec -it zookeeper /bin/bash
bin/zkCli.sh

------------------------
mvn 编译指定module，以及依赖他的 跳过测试
mvn compile -pl blah-user -Pproduct -am -Dmaven.test.skip=true

如果3和4依赖于1 那么编译1过后同时会把3和4编译出来
mvn package -pl module_1 -Pproduct -amd

mvn dependency:tree>temp/tree.txt
mvn dependency:tree

